apt:
  sources:
    grafana:
      source: deb https://apt.grafana.com stable main
      keyid: 963FA27710458545
      keyserver: https://apt.grafana.com/gpg.key

packages:
- grafana-agent-flow

runcmd:
- [ sed, -e, s/CUSTOM_ARGS=.*/CUSTOM_ARGS="--server.http.listen-addr=0.0.0.0:8080"/g, -i, /etc/default/grafana-agent-flow ]
- [ systemctl, enable, grafana-agent-flow ]
- [ systemctl, start, --no-block, grafana-agent-flow ]
- [ sh, -xc, "echo $(ip r | grep default | cut -d' ' -f3) grafana.k3d.localhost loki.k3d.localhost mimir.k3d.localhost >> /etc/hosts" ]

write_files:
- owner: root:grafana-agent
  path: /etc/grafana-agent-flow.river
  content: |
    discovery.relabel "logs_integrations_integrations_node_exporter_journal_scrape" {
      targets = []

      rule {
        source_labels = ["__journal__systemd_unit"]
        target_label  = "unit"
      }

      rule {
        source_labels = ["__journal__boot_id"]
        target_label  = "boot_id"
      }

      rule {
        source_labels = ["__journal__transport"]
        target_label  = "transport"
      }

      rule {
        source_labels = ["__journal_priority_keyword"]
        target_label  = "level"
      }
    }

    loki.source.journal "logs_integrations_integrations_node_exporter_journal_scrape" {
      max_age       = "24h0m0s"
      relabel_rules = discovery.relabel.logs_integrations_integrations_node_exporter_journal_scrape.rules
      forward_to    = [loki.write.logs_integrations.receiver]
    }

    local.file_match "logs_integrations_integrations_node_exporter_direct_scrape" {
      path_targets = [{
        __address__ = "localhost",
        __path__    = "/var/log/{syslog,messages,*.log}",
        instance    = "{{instance_name}}",
        job         = "integrations/node_exporter",
      }]
    }

    loki.source.file "logs_integrations_integrations_node_exporter_direct_scrape" {
      targets    = local.file_match.logs_integrations_integrations_node_exporter_direct_scrape.targets
      forward_to = [loki.write.logs_integrations.receiver]
    }

    loki.write "logs_integrations" {
      endpoint {
        url = "{{loki_url}}"

        {% if loki_user and loki_pass -%}
        basic_auth {
          username = "{{loki_user}}"
          password = "{{loki_pass}}"
        }
        {%- endif %}
      }
      external_labels = {}
    }

    prometheus.exporter.agent "integrations_agent" { }

    discovery.relabel "integrations_agent" {
      targets = prometheus.exporter.agent.integrations_agent.targets

      rule {
        source_labels = ["agent_hostname"]
        target_label  = "instance"
      }

      rule {
        target_label = "job"
        replacement  = "integrations/agent-check"
      }
    }

    prometheus.scrape "integrations_agent" {
      targets    = discovery.relabel.integrations_agent.output
      forward_to = [prometheus.relabel.integrations_agent.receiver]
      job_name   = "integrations/agent"
    }

    prometheus.relabel "integrations_agent" {
      forward_to = [prometheus.remote_write.integrations.receiver]

      rule {
        source_labels = ["__name__"]
        regex         = "(prometheus_target_.*|prometheus_sd_discovered_targets|agent_build.*|agent_wal_samples_appended_total|process_start_time_seconds)"
        action        = "keep"
      }
    }

    prometheus.remote_write "integrations" {
      endpoint {
        url = "{{prom_url}}"

        {% if prom_user and prom_pass -%}
        basic_auth {
          username = "{{prom_user}}"
          password = "{{prom_pass}}"
        }
        {%- endif %}

        queue_config { }

        metadata_config { }
      }
    }

    prometheus.exporter.unix "integrations_node_exporter" {
      disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]

      filesystem {
        fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
        mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
        mount_timeout        = "5s"
      }

      netclass {
        ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
      }

      netdev {
        device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
      }
    }

    discovery.relabel "integrations_node_exporter" {
      targets = prometheus.exporter.unix.integrations_node_exporter.targets

      rule {
        target_label = "instance"
        replacement  = "{{instance_name}}"
      }

      rule {
        target_label = "job"
        replacement = "integrations/node_exporter"
      }
    }

    prometheus.scrape "integrations_node_exporter" {
      targets    = discovery.relabel.integrations_node_exporter.output
      forward_to = [prometheus.relabel.integrations_node_exporter.receiver]
    }

    prometheus.relabel "integrations_node_exporter" {
      forward_to = [prometheus.remote_write.integrations.receiver]

      rule {
        source_labels = ["__name__"]
        regex         = "node_scrape_collector_.+"
        action        = "drop"
      }
    }
