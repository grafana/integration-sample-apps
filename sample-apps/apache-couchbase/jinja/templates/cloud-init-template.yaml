#cloud-config
# Cloud-init configuration for setting up Alloy and Apache Couchbase sample-app

package_update: true
package_upgrade: false

apt:
  sources:
    grafana:
      source: deb https://apt.grafana.com stable main
      keyid: 963FA27710458545
      keyserver: https://apt.grafana.com/gpg.key

# Define required packages
packages:
  - git
  - gpg
  - curl

write_files:
  - owner: root:root
    path: /etc/default/alloy
    content: |
      ## Path:
      ## Description: Grafana Alloy settings
      ## Type:        string
      ## Default:     ""
      ## ServiceRestart: alloy
      #
      # Command line options for Alloy.
      #
      # The configuration file holding the Alloy config.
      CONFIG_FILE="/etc/alloy/config.alloy"

      # User-defined arguments to pass to the run command.
      CUSTOM_ARGS="--stability.level=experimental"

      # Restart on system upgrade. Defaults to true.
      RESTART_ON_UPGRADE=true

  # Couchbase configuration
  - owner: root:root
    path: /etc/alloy/config.alloy
    content: |
      logging {
        level = "debug"
      }
      
      prometheus.exporter.self "alloy_check" { }

      discovery.relabel "alloy_check" {
        targets = prometheus.exporter.self.alloy_check.targets

        rule {
          target_label = "instance"
          replacement  = constants.hostname
        }

        rule {
          target_label = "alloy_hostname"
          replacement  = constants.hostname
        }

        rule {
          target_label = "job"
          replacement  = "integrations/alloy-check"
        }
      }

      prometheus.scrape "alloy_check" {
        targets    = discovery.relabel.alloy_check.output
        forward_to = [prometheus.relabel.alloy_check.receiver]  

        scrape_interval = "60s"
      }

      prometheus.relabel "alloy_check" {
        forward_to = [prometheus.remote_write.metrics_service.receiver]
        rule {
          source_labels = ["__name__"]
          regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
          action        = "keep"
        }
      }

      {% if prom_url -%}
      prometheus.remote_write "metrics_service" {
        endpoint {
          url = "{{ prom_url }}"

          {% if prom_user and prom_pass -%}
          basic_auth {
            username = "{{ prom_user }}"
            password = "{{ prom_pass }}"
          }
          {%- endif %}
        }
      }
      {%- endif %}

      {% if loki_url -%}
      loki.write "grafana_loki" {
        endpoint {
          url = "{{ loki_url }}"

          {% if loki_user and loki_pass -%}
          basic_auth {
            username = "{{ loki_user }}"
            password = "{{ loki_pass }}"
          }
          {%- endif %}
        }
      }

      local.file_match "logs_integrations_integrations_couchbase" {
        path_targets = [{
          __address__       = "localhost",
          __path__         = "/opt/couchbase/var/lib/couchbase/logs/*.log",
          couchbase_cluster = "{{ couchbase_cluster }}",
          instance         = constants.hostname,
          job             = "integrations/couchbase",
        }]
      }

      loki.process "logs_integrations_integrations_couchbase" {
        forward_to = [loki.write.grafana_loki.receiver]

        stage.drop {
          expression = "---"
        }

        stage.multiline {
          firstline     = "\\[(ns_server|couchdb):(error|info),.*\\]"
          max_lines     = 0
          max_wait_time = "3s"
        }
      }

      loki.source.file "logs_integrations_integrations_couchbase" {
        targets    = local.file_match.logs_integrations_integrations_couchbase.targets
        forward_to = [loki.process.logs_integrations_integrations_couchbase.receiver]
      }
      {%- endif %}

      prometheus.scrape "couchbase" {
        targets = [
          { "__address__" = "localhost:8091" },
        ]
        job_name = "integrations/couchbase"
        forward_to = [prometheus.relabel.couchbase.receiver]
        scrape_interval = "10s"
        metrics_path = "/metrics"
      }

      
      prometheus.relabel "couchbase" {
        forward_to = [prometheus.remote_write.metrics_service.receiver]
        
        rule {
          target_label = "instance"
          replacement = constants.hostname
        }
        
        rule {
          target_label = "couchbase_cluster"
          replacement = "{{ couchbase_cluster }}"
        }
      }

runcmd:
  # Create keyring directory
  - mkdir -p /etc/apt/keyrings/
  - mkdir -p /var/lib/alloy/data
  
  
  # Download and install Grafana GPG key
  - curl -fsSL https://apt.grafana.com/gpg.key | gpg --dearmor -o /etc/apt/keyrings/grafana.gpg
  
  # Add Grafana repository
  - echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" > /etc/apt/sources.list.d/grafana.list
  
  # Update package lists
  - apt-get update

  # Install Alloy
  - DEBIAN_FRONTEND=noninteractive apt-get install -y alloy

  # Install Couchbase
  - |
    curl -O https://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-noarch.deb
    dpkg -i ./couchbase-release-1.0-noarch.deb
    apt-get update
    apt-get install -y couchbase-server-community

  - |
    timeout 15s bash <<EOF
    wait_for_couchbase() {
      until curl -s http://localhost:8091/ > /dev/null 2>&1; do
        echo "Waiting for Couchbase to be ready..."
        sleep 5
      done
    }

    wait_for_couchbase
    EOF

  # --- Configure Alloy to run as root ---
  # Modify the service file to remove User and Group lines
  - sed -i '/^\[Service\]/,/^\[/ { /^[ \t]*User=/d; /^[ \t]*Group=/d }' /lib/systemd/system/alloy.service || echo "Could not modify /lib/systemd/system/alloy.service"
  # Also try modifying in /etc/systemd/system just in case
  - sed -i '/^\[Service\]/,/^\[/ { /^[ \t]*User=/d; /^[ \t]*Group=/d }' /etc/systemd/system/alloy.service || echo "Could not modify /etc/systemd/system/alloy.service"


  # - chmod -R u=rX,go= /etc/alloy

  # Start and enable Alloy
  - systemctl daemon-reload
  - systemctl enable alloy
  - systemctl restart alloy
  
