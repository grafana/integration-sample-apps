# jinja/templates/cloud-init-template.yaml
# Cloud-init configuration for setting up Alloy and required sample-app

apt:
  sources:
    grafana:
      source: deb https://apt.grafana.com stable main
      keyid: 963FA27710458545
      keyserver: https://apt.grafana.com/gpg.key

packages:
- git
- gpg
- alloy

runcmd:
  # General setup
  - sudo apt-get update

  # Configure Alloy
  - sudo systemctl enable alloy.service
  - sudo systemctl start alloy.service

  # Install Postgres
  - sudo apt install postgresql -y
  - sudo apt install postgresql-contrib -y

  # Start Postgres
  - sudo systemctl start postgresql.service

  # Configure local user password, needed for Alloy access
  - sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'sekret';"

  # Restart Alloy for good measure
  - sudo systemctl restart alloy.service

write_files:
# Alloy configuration
- owner: root:root
  path: /etc/alloy/config.alloy
  content: |
    prometheus.exporter.self "alloy_check" { }

    discovery.relabel "alloy_check" {
      targets = prometheus.exporter.self.alloy_check.targets

      rule {
        target_label = "instance"
        replacement  = constants.hostname
      }

      rule {
        target_label = "alloy_hostname"
        replacement  = constants.hostname
      }

      rule {
        target_label = "job"
        replacement  = "integrations/alloy-check"
      }
    }

    prometheus.scrape "alloy_check" {
      targets    = discovery.relabel.alloy_check.output
      forward_to = [prometheus.relabel.alloy_check.receiver]  

      scrape_interval = "60s"
    }

    prometheus.relabel "alloy_check" {
      forward_to = [prometheus.remote_write.metrics_service.receiver]

      rule {
        source_labels = ["__name__"]
        regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
        action        = "keep"
      }
    }

    prometheus.remote_write "metrics_service" {
      endpoint {
        url = "{{ prom_url }}"

        {% if loki_user and loki_pass -%}
        basic_auth {
          username = "{{ prom_user }}"
          password = "{{ prom_pass }}"
        }
        {%- endif %}
      }
    }

    loki.write "grafana_cloud_loki" {
      endpoint {
        url = "{{ loki_url }}"

        {% if loki_user and loki_pass -%}
        basic_auth {
          username = "{{ loki_user }}"
          password = "{{ loki_pass }}"
        }
        {%- endif %}
      }
    }
    prometheus.exporter.postgres "integrations_postgres_exporter" {
      data_source_names = ["postgresql://postgres:sekret@localhost:5432/postgres?sslmode=disable"]
    }
    discovery.relabel "integrations_postgres_exporter" {
      targets = prometheus.exporter.postgres.integrations_postgres_exporter.targets

      rule {
        target_label = "instance"
        replacement  = "postgresql-sample-app"
      }
      rule {                
        target_label = "job"
        replacement  = "integrations/postgres_exporter"
      }
    }
    prometheus.scrape "integrations_postgres_exporter" {
      targets    = discovery.relabel.integrations_postgres_exporter.output
      forward_to = [prometheus.remote_write.metrics_service.receiver]
      job_name   = "integrations/postgres_exporter"
    }
    local.file_match "logs_integrations_postgres_exporter" {
      path_targets = [{
        __address__ = "localhost",
        __path__    = "/var/log/postgresql/postgres.log",
        instance    = "postgresql-sample-app",
        job         = "integrations/postgres_exporter",
      }]
    }
    loki.source.file "logs_integrations_postgres_exporter" {
      targets    = local.file_match.logs_integrations_postgres_exporter.targets
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
