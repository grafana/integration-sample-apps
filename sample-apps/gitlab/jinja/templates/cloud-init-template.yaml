# jinja/templates/cloud-init-template.yaml
# Cloud-init configuration for setting up Alloy and required <INTEGRATION_NAME> sample-app
# {% set gitlab_root_password = gitlab_root_password | default("d.^_R740Vp=/") %}

apt:
  sources:
    grafana:
      source: deb https://apt.grafana.com stable main
      keyid: 963FA27710458545
      keyserver: https://apt.grafana.com/gpg.key

packages:
- git
- gpg
- alloy


write_files:
# Alloy configuration
- owner: root:root
  path: /etc/alloy/config.alloy
  content: |
    prometheus.exporter.self "alloy_check" { }

    discovery.relabel "alloy_check" {
      targets = prometheus.exporter.self.alloy_check.targets

      rule {
        target_label = "instance"
        replacement  = constants.hostname
      }

      rule {
        target_label = "alloy_hostname"
        replacement  = constants.hostname
      }

      rule {
        target_label = "job"
        replacement  = "integrations/alloy-check"
      }
    }

    prometheus.scrape "alloy_check" {
      targets    = discovery.relabel.alloy_check.output
      forward_to = [prometheus.relabel.alloy_check.receiver]  

      scrape_interval = "60s"
    }

    prometheus.relabel "alloy_check" {
      forward_to = [prometheus.remote_write.metrics_service.receiver]

      rule {
        source_labels = ["__name__"]
        regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
        action        = "keep"
      }
    }

    prometheus.remote_write "metrics_service" {
      endpoint {
        url = "{{ prom_url }}"

        {% if loki_user and loki_pass -%}
        basic_auth {
          username = "{{ prom_user }}"
          password = "{{ prom_pass }}"
        }
        {%- endif %}
      }
    }

    loki.write "grafana_cloud_loki" {
      endpoint {
        url = "{{ loki_url }}"

        {% if loki_user and loki_pass -%}
        basic_auth {
          username = "{{ loki_user }}"
          password = "{{ loki_pass }}"
        }
        {%- endif %}
      }
    }

    discovery.relabel "metrics_integrations_integrations_gitlab" {
      targets = [{
        __address__ = "localhost:80",
      }]

      rule {
        target_label = "instance"
        replacement  = constants.hostname
      }
    }
    prometheus.scrape "metrics_integrations_integrations_gitlab" {
      targets      = discovery.relabel.metrics_integrations_integrations_gitlab.output
      forward_to   = [prometheus.remote_write.metrics_service.receiver]
      job_name     = "integrations/gitlab"
      metrics_path = "/-/metrics"
    }
      
    local.file_match "logs_integrations_integrations_gitlab" {
      path_targets = [{
        __address__ = "localhost",
        __path__    = "/var/log/gitlab/gitlab-rails/exceptions_json.log",
        instance    = constants.hostname,
        job         = "integrations/gitlab",
      }]
    }

    loki.process "logs_integrations_integrations_gitlab" {
      forward_to = [loki.write.grafana_cloud_loki.receiver]

      stage.match {
        selector            = "{job=\"integrations/gitlab\"} |~ \"^#\""
        action              = "drop"
        drop_counter_reason = "gitlab_comment_line"
      }
    }

    loki.source.file "logs_integrations_integrations_gitlab" {
      targets    = local.file_match.logs_integrations_integrations_gitlab.targets
      forward_to = [loki.process.logs_integrations_integrations_gitlab.receiver]
    }
    

- owner: root:root
  path: /home/ubuntu/generate-error-log.sh
  content: |
    #!/bin/bash
    gitlab-rails runner "begin; raise StandardError, 'Test exception for logging'; rescue => e; Gitlab::ErrorTracking.track_exception(e, extra_info: 'Manual test for exceptions_json.log'); end"

- owner: root:root
  path: /home/ubuntu/reset-root-password.sh
  content: |
    #!/bin/bash
    gitlab-rails runner "user = User.find_by(username: 'root'); user.password = '{{ gitlab_root_password }}'; user.password_confirmation = '{{ gitlab_root_password }}'; user.password_automatically_set = false; user.save!"


runcmd:
  # General setup
  - sudo apt-get update
  - sudo chmod +x /home/ubuntu/generate-error-log.sh
  - sudo chmod +x /home/ubuntu/reset-root-password.sh

  ## Install Gitlab
  # this script already predetermines based off your OS which version of GitLab to install
  - curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
  - sudo apt-get install -y gitlab-ce

  # Enable monitoring whitelist for localhost
  - echo "gitlab_rails['monitoring_whitelist'] = ['127.0.0.0/8']" | sudo tee -a /etc/gitlab/gitlab.rb 

  # This is a heavy operation, it can take a while to complete
  - sudo gitlab-ctl reconfigure

  # Reset root password using gitlab-rails runner (non-interactive)
  - sudo /home/ubuntu/reset-root-password.sh



  # Add alloy user to adm group for log access, not recommended for production but works for testing
  - sudo usermod -a -G adm alloy
  - sudo chgrp adm /var/log/gitlab/gitlab-rails/
  - sudo chmod g+rx /var/log/gitlab/gitlab-rails/ && sudo usermod -a -G git alloy

  - sudo sh -c /home/ubuntu/generate-error-log.sh 2>&1 > /home/ubuntu/error.log
  
  # Configure Alloy
  - sudo systemctl enable alloy.service
  - sudo systemctl start alloy.service

  # Setup load generation components
  - sudo chmod +x /home/ubuntu/create-gitlab-project.sh
  - sudo chmod +x /home/ubuntu/setup-ci-pipeline.sh
  - sudo chmod +x /home/ubuntu/generate-api-token.sh
  
  # Create project and setup CI/CD pipeline for load testing
  - sudo /home/ubuntu/create-gitlab-project.sh
  - sudo /home/ubuntu/setup-ci-pipeline.sh
  - sudo /home/ubuntu/generate-api-token.sh

  # Setup GitLab Runner for executing pipelines
  - sudo chmod +x /home/ubuntu/setup-gitlab-runner.sh
  - sudo /home/ubuntu/setup-gitlab-runner.sh
  - sudo chmod +x /home/ubuntu/trigger-initial-pipeline.sh
  - sudo /home/ubuntu/trigger-initial-pipeline.sh
