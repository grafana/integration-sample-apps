# jinja/templates/cloud-init-template.yaml
# Cloud-init configuration for setting up Alloy and required sample-app

apt:
  sources:
    grafana:
      source: deb https://apt.grafana.com stable main
      keyid: 963FA27710458545
      keyserver: https://apt.grafana.com/gpg.key

packages:
- git
- gpg
- alloy

runcmd:
  # General setup
  - sudo apt-get update
  
  # Install snmp daemon
  - sudo apt install snmpd -y

  # Copy the new snmpd config to the existing file to preserve the existing
  # file's rather strange group ownership, which snmp is twitchy about
  - sudo cat /etc/snmp/snmpd_sample_app.conf > /etc/snmp/snmpd.conf

  # Configure firewall, just in case
  - ufw allow 161/udp
  - ufw allow 162/udp
  
  - systemctl daemon-reload
  - sudo systemctl restart snmpd rsyslog

  # Configure Alloy
  - sudo systemctl enable alloy.service
  - sudo systemctl start alloy.service

  # Small ping just to get some traffic on the interface
  - sudo ping grafana.com > /dev/null & 

  # for snmpsim
  - sudo usermod -a -G docker ubuntu


write_files:
- owner: root:root
  path: /etc/rsyslog.d/100-cisco.conf
  content: |
    module(load="imudp")
    #https://www.rsyslog.com/doc/master/configuration/modules/pmciscoios.html
    module(load="pmciscoios")

    input(type="imudp" port="10516" ruleset="withOrigin")
    input(type="imudp" port="10517" ruleset="withoutOrigin")

    timezone(id="GMT" offset="+00:00")
    # instead of -x
    global(net.enableDNS="off")

    $template raw,"%msg:2:2048%\n"

    ruleset(name="alloy") {
          action(
          type="omfwd"
          protocol="udp" target="127.0.0.1" port="10515"
          Template="RSYSLOG_SyslogProtocol23Format"
          )
          *.*    /dev/stdout; raw
    }

    ruleset(name="withoutOrigin" parser="rsyslog.ciscoios") {
          /* this ruleset uses the default parser which was
          * created during module load
          */
          call alloy
    }

    parser(name="custom.ciscoios.withOrigin" type="pmciscoios"
          present.origin="on")
    ruleset(name="withOrigin" parser="custom.ciscoios.withOrigin") {
          /* this ruleset uses the parser defined immediately above */
          call alloy
    }

# snmpd configuration
- owner: root:root
  path: /etc/snmp/snmpd_sample_app.conf
  content: |
    ###########################################################################
    #
    # snmpd.conf
    # An example configuration file for configuring the Net-SNMP agent ('snmpd')
    # See snmpd.conf(5) man page for details
    #
    ###########################################################################
    # SECTION: System Information Setup
    #

    # syslocation: The [typically physical] location of the system.
    #   Note that setting this value here means that when trying to
    #   perform an snmp SET operation to the sysLocation.0 variable will make
    #   the agent return the "notWritable" error code.  IE, including
    #   this token in the snmpd.conf file will disable write access to
    #   the variable.
    #   arguments:  location_string
    sysLocation    Sitting on the Dock of the Bay
    sysContact     Me <me@example.org>

    # sysservices: The proper value for the sysServices object.
    #   arguments:  sysservices_number
    sysServices    72



    ###########################################################################
    # SECTION: Agent Operating Mode
    #
    #   This section defines how the agent will operate when it
    #   is running.

    # master: Should the agent operate as a master agent or not.
    #   Currently, the only supported master agent type for this token
    #   is "agentx".
    #   
    #   arguments: (on|yes|agentx|all|off|no)

    master  agentx

    # agentaddress: The IP address and port number that the agent will listen on.
    #   By default the agent listens to any and all traffic from any
    #   interface on the default SNMP port (161).  This allows you to
    #   specify which address, interface, transport type and port(s) that you
    #   want the agent to listen on.  Multiple definitions of this token
    #   are concatenated together (using ':'s).
    #   arguments: [transport:]port[@interface/address],...

    #agentaddress  127.0.0.1,[::1]
    agentaddress udp:161


    ###########################################################################
    # SECTION: Access Control Setup
    #
    #   This section defines who is allowed to talk to your running
    #   snmp agent.

    # Views 
    #   arguments viewname included [oid]

    #  system + hrSystem groups only
    view   systemonly  included   .1.3.6.1.2.1.1
    view   systemonly  included   .1.3.6.1.2.1.25.1


    # rocommunity: a SNMPv1/SNMPv2c read-only access community name
    #   arguments:  community [default|hostname|network/bits] [oid | -V view]

    # Read-only access to everyone to the systemonly view
    # rocommunity  public default -V systemonly
    # rocommunity6 public default -V systemonly
    rocommunity public

    # SNMPv3 doesn't use communities, but users with (optionally) an
    # authentication and encryption string. This user needs to be created
    # with what they can view with rouser/rwuser lines in this file.
    #
    # createUser username (MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224) authpassphrase [DES|AES] [privpassphrase]
    # e.g.
    # createuser authPrivUser SHA-512 myauthphrase AES myprivphrase
    #
    # This should be put into /var/lib/snmp/snmpd.conf 
    #
    # rouser: a SNMPv3 read-only access username
    #    arguments: username [noauth|auth|priv [OID | -V VIEW [CONTEXT]]]
    rouser authPrivUser authpriv -V systemonly

    # include a all *.conf files in a directory
    includeDir /etc/snmp/snmpd.conf.d

# Alloy configuration
- owner: root:root
  path: /etc/default/alloy
  content: |
    ## Path:
    ## Description: Grafana Alloy settings
    ## Type:        string
    ## Default:     ""
    ## ServiceRestart: alloy
    #
    # Command line options for Alloy.
    #
    # The configuration file holding the Alloy config.
    CONFIG_FILE="/etc/alloy/config.alloy"

    # User-defined arguments to pass to the run command.
    CUSTOM_ARGS="--stability.level=experimental"

    # Restart on system upgrade. Defaults to true.
    RESTART_ON_UPGRADE=true
- owner: root:root
  path: /etc/alloy/config.alloy
  content: |
    logging {
      level = "debug"
    }

    prometheus.exporter.self "alloy_check" { }

    discovery.relabel "alloy_check" {
      targets = prometheus.exporter.self.alloy_check.targets

      rule {
        target_label = "instance"
        replacement  = constants.hostname
      }

      rule {
        target_label = "alloy_hostname"
        replacement  = constants.hostname
      }

      rule {
        target_label = "job"
        replacement  = "integrations/alloy-check"
      }
    }

    prometheus.scrape "alloy_check" {
      targets    = discovery.relabel.alloy_check.output
      forward_to = [prometheus.relabel.alloy_check.receiver]  

      scrape_interval = "60s"
    }

    prometheus.relabel "alloy_check" {
      forward_to = [prometheus.remote_write.metrics_service.receiver]

      rule {
        source_labels = ["__name__"]
        regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
        action        = "keep"
      }
    }

    prometheus.remote_write "metrics_service" {
      endpoint {
        url = "{{ prom_url }}"

        {% if loki_user and loki_pass -%}
        basic_auth {
          username = "{{ prom_user }}"
          password = "{{ prom_pass }}"
        }
        {%- endif %}
      }
    }

    loki.write "grafana_cloud_loki" {
      endpoint {
        url = "{{ loki_url }}"

        {% if loki_user and loki_pass -%}
        basic_auth {
          username = "{{ loki_user }}"
          password = "{{ loki_pass }}"
        }
        {%- endif %}
      }
    }

    discovery.file "network_devices" {
      files = ["/tmp/targets.yml"]
    }

    prometheus.exporter.snmp "integrations_snmpsim" {
      config_merge_strategy = "merge"
      config_file = "/tmp/auths.yml"
      targets = discovery.file.network_devices.targets
    }
   
    prometheus.scrape "integrations_snmpsim" {
      targets    = prometheus.exporter.snmp.integrations_snmpsim.targets
      forward_to = [prometheus.relabel.integrations_snmp.receiver]
      job_name   = "integrations/snmpsim"
      scrape_timeout = "30s"
    }
    

    prometheus.exporter.snmp "integrations_snmp" {
      target "snmp_sample_app" {
        address = "127.0.0.1"
        module  = "system,if_mib,hrDevice,hrStorage"
        auth    = "public_v2"
      }
    }

    prometheus.scrape "integrations_snmp" {
      targets    = prometheus.exporter.snmp.integrations_snmp.targets
      forward_to = [prometheus.relabel.integrations_snmp.receiver]
      job_name   = "integrations/snmp"
    }

    prometheus.relabel "integrations_snmp" {
      forward_to = [prometheus.remote_write.metrics_service.receiver]
      rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "job_snmp"
      }

      rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "snmp_target"
        replacement   = "$2"
      }
      rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "instance"
        replacement   = "$2"
      }
    }
    // Receive syslog messages
    loki.source.syslog "incoming" {
        listener {
            address = ":10514"
            syslog_format = "rfc3164"
            protocol = "udp"
            labels = {
                job = "syslog",
            }
        }
        forward_to = [loki.enrich.integrations_snmp.receiver]
        relabel_rules = loki.relabel.integrations_snmp.rules
    }
    loki.source.syslog "incoming_10515" {
        listener {
            address = ":10515"
            syslog_format = "rfc5424"
            protocol = "udp"
            labels = {
                job = "syslog",
            } 
      }
        forward_to = [loki.enrich.integrations_snmp.receiver]
        relabel_rules = loki.relabel.integrations_snmp.rules
    }

    loki.relabel "integrations_snmp" {
      forward_to = []

      rule {
        source_labels = ["__syslog_message_hostname"]
        target_label         = "hostname"
      }
      rule {
        source_labels = ["__syslog_message_severity"]
        target_label         = "level"
      }
      rule {
        source_labels = ["__syslog_message_facility"]
        target_label         = "facility"
      }
      rule {
        source_labels = ["__syslog_message_msg_id"]
        target_label         = "syslog_msg_id"
      }
      rule {
        source_labels = ["__syslog_message_app_name"]
        target_label         = "syslog_app_name"
      }
    }


    // Enrich logs with device metadata
    loki.enrich "integrations_snmp" {

      targets = discovery.file.network_devices.targets
      // List of labels to copy from discovered targets to logs
      labels_to_copy = [
        "datacenter",
        "rack",
      ]
      // Match on hostname/IP from logs
      target_match_label = "name"
      logs_match_label = "hostname"

      forward_to = [loki.relabel.integrations_snmp_final.receiver]
    }
    loki.relabel "integrations_snmp_final" {
      rule {
        replacement   = "integrations/snmp"
        target_label  = "job_snmp"
      }
      rule {
        source_labels = ["hostname"]
        target_label  = "snmp_target"
      }
      rule {
        source_labels = ["hostname"]
        target_label  = "instance"
      }
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
