# jinja/templates/cloud-init-template.yaml
# Cloud-init configuration for setting up Postgres, PGbouncer, PGbouncer Exporter, and Grafana Agent

apt:
  sources:
    grafana:
      source: deb https://apt.grafana.com stable main
      keyid: 963FA27710458545
      keyserver: https://apt.grafana.com/gpg.key

packages:
- git
- grafana-agent

runcmd:
  # Install and configure postgresql
  - sudo apt-get update
  - sudo apt install postgresql
  - sudo apt-get install -y pgbouncer

  # Configure pgbouncer 
  - sudo truncate -s 0 /etc/pgbouncer/pgbouncer.ini
  - echo "[databases]" | sudo tee /etc/pgbouncer/pgbouncer.ini
  - echo "test_db= dbname=postgres host=localhost port=5432 user=postgres" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "[users]" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "[pgbouncer]" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "user = postgres" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "logfile = /var/log/postgresql/pgbouncer.log" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "pidfile = /var/run/postgresql/pgbouncer.pid" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "listen_addr = localhost" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "listen_port = 6543" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "unix_socket_dir = /var/run/postgresql" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "auth_type = any" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "pool_mode = transaction" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "log_pooler_errors = 1" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - echo "ignore_startup_parameters = extra_float_digits" | sudo tee -a /etc/pgbouncer/pgbouncer.ini
  - sudo systemctl restart pgbouncer

  # Configure Grafana Agent
  - systemctl enable grafana-agent
  - systemctl start grafana-agent
  - sudo apt-get install postgresql-contrib -y
  
  #Install Exporter
  - git clone https://github.com/prometheus-community/pgbouncer_exporter.git  
  - cd /pgbouncer_exporter/
  - git config --global --add safe.directory /pgbouncer_exporter
  - sudo apt install make -y
  - sudo snap install go --classic
  - sudo make build
  - ./pgbouncer_exporter &

write_files:
# Grafana Agent configuration
- owner: root:root
  path: /etc/grafana-agent.yaml
  content: |
    integrations:
      node_exporter:
        enabled: true
        relabel_configs:
        - replacement: hostname
          target_label: instance
      prometheus_remote_write:
      - url: "{{ prom_url }}"
        {% if prom_user and prom_pass -%}
        basic_auth:
          password: "{{ prom_pass }}"
          username: "{{ prom_user }}"
        {%- endif %}
    logs:
      configs:
      - name: integrations/pgbouncer
        clients:
          - url: "{{ loki_url }}"
            {% if loki_user and loki_pass -%}
            basic_auth:
              username: "{{ loki_user }}"
              password: "{{ loki_pass }}"
            {%- endif %}
        positions:
          filename: /tmp/positions.yaml
        target_config:
          sync_period: 10s
        scrape_configs:
        - job_name: integrations/pgbouncer
          static_configs:
            - targets: [localhost]
              labels:
                job: integrations/pgbouncer
                __path__: /var/log/postgresql/pgbouncer.log
              pgbouncer_cluster: cluster-A
          pipeline_stages:
          - multiline:
            firstline: '\d{4}-\d{2}-\d{2}\s\d{2}\:\d{2}\:\d{2}\.\d{3}'
          - regex:
            expression: '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3} \w+ \[\d+\] (?P<level>LOG|ERROR|WARNING|INFO|DEBUG)'
          - labels:
            level:

    metrics:
      configs:
      - name: integrations/pgbouncer
        remote_write:
        - url: "{{ prom_url }}"
          {% if prom_user and prom_pass -%}
          basic_auth:
            password: "{{ prom_pass }}"
            username: "{{ prom_user }}"
          {%- endif %}
        scrape_configs:
        - job_name: integrations/pgbouncer
          metrics_path: /metrics
          static_configs:
          - targets: ["localhost:9127"]

      global:
        scrape_interval: 60s
      wal_directory: /tmp/grafana-agent-wal
