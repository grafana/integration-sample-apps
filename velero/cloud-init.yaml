apt:
  sources:
    grafana:
      source: deb https://apt.grafana.com stable main
      keyid: 963FA27710458545
      keyserver: https://apt.grafana.com/gpg.key

packages:
- grafana-agent-flow
- dpkg-dev

runcmd:
  - sed -e s/CUSTOM_ARGS=.*/CUSTOM_ARGS="--server.http.listen-addr=0.0.0.0:8080"/g -i /etc/default/grafana-agent-flow 
  - systemctl enable grafana-agent-flow 
  - systemctl start --no-block grafana-agent-flow 
  - echo $(ip r | grep default | cut -d' ' -f3) grafana.k3d.localhost loki.k3d.localhost mimir.k3d.localhost >> /etc/hosts

write_files:
# Grafana Agent configuration
- owner: root:root
  path: /grafana-agent-flow.yaml
  content: |
    integrations:
      node_exporter:
        enabled: true
        relabel_configs:
        - replacement: hostname
          target_label: instance
      prometheus_remote_write:
      - url: "http://your-prometheus-instance:9090/api/v1/push"
        basic_auth:
          password: "your_prometheus_password"
          username: "your_prometheus_username"
    logs:
      configs:
      - name: integrations/pgbouncer
        clients:
          - url: "http://your-loki-instance:3100/loki/api/v1/push"
            basic_auth:
              username: "your_loki_username"
              password: "your_loki_password"
        positions:
          filename: /tmp/positions.yaml
        target_config:
          sync_period: 10s
        scrape_configs:
        - job_name: integrations/pgbouncer
          static_configs:
            - targets: [localhost]
              labels:
                job: integrations/pgbouncer
                __path__: /var/log/postgresql/pgbouncer.log
              pgbouncer_cluster: cluster-A
          pipeline_stages:
          - multiline:
            firstline: '\d{4}-\d{2}-\d{2}\s\d{2}\:\d{2}\:\d{2}\.\d{3}'
          - regex:
            expression: '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3} \w+ \[\d+\] (?P<level>LOG|ERROR|WARNING|INFO|DEBUG)'
          - labels:
            level:

    metrics:
      configs:
      - name: integrations/pgbouncer
        remote_write:
        - url: "http://your-prometheus-instance:9090/api/v1/push"
          basic_auth:
            password: "your_prometheus_password"
            username: "your_prometheus_username"
        scrape_configs:
        - job_name: integrations/pgbouncer
          metrics_path: /metrics
          static_configs:
          - targets: ["localhost:9127"]

      global:
        scrape_interval: 60s
      wal_directory: /tmp/grafana-agent-wal   

    cluster:
      name: "velero_cluster"

    externalServices:
      prometheus:
        host: "https://prometheus-us-central1.grafana.net"
        basicAuth:
          username: "your_prometheus_username"
          password: "your_prometheus_password"
      loki:
        host: "https://logs-prod3.grafana.net"
        basicAuth:
          username: "your_loki_username"
          password: "your_loki_password"


    extraConfig: |-
      discovery.relabel "velero" {
        targets = discovery.kubernetes.endpoints.targets
        rule {
          action        = "keep"
          source_labels = ["__meta_kubernetes_service_name"]
          regex         = "velero-exporter"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
          separator = "-"
          target_label = "instance"
        }
        rule {
          replacement = "integrations/velero"
          target_label = "job"
        }
      }

      prometheus.scrape "velero" {
        targets      = discovery.relabel.velero.output
        forward_to   = [prometheus.relabel.metrics_service.receiver]
      }

    logs:
      enabled: true
      extraConfig: |-
        discovery.relabel "velero_logs" {
          targets = discovery.kubernetes.pods.targets

          rule {
            action        = "keep"
            source_labels = ["__meta_kubernetes_pod_name"]
            regex         = "my-velero-0"
          }
          rule {
            target_label = "job"
            replacement = "integrations/velero"
          }
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
            separator = "-"
            target_label = "instance"
          }
          rule {
            action = "replace"
            source_labels = ["__meta_kubernetes_pod_name"]
            target_label  = "pod"
          }
        }

        loki.source.kubernetes "velero_logs" {
          targets    = discovery.relabel.velero_logs.output
          forward_to = [loki.process.velero_logs.receiver]
        }

        loki.process "velero_logs" {
          forward_to = [loki.process.logs_service.receiver]
        }
