name: "Windows Sample App"

permissions:
  contents: read

on:
  # To conserve resources we only run tests against main in PRs
  pull_request:
    branches:
      - main
    paths:
      - 'sample-apps/windows-node/**'
  
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  test-windows-sample-app:
    name: Test Windows sample app
    runs-on: windows-latest
    timeout-minutes: 45
    
    defaults:
      run:
        shell: wsl-bash {0}
        
    steps:
      - name: Set git to use LF
        shell: cmd
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup WSL
        uses: Vampire/setup-wsl@3b46b44374d5d0ae94654c45d114a3ed7a0e07a8 # v5.0.1
        with:
          distribution: Ubuntu-20.04
          wsl-shell-command: bash -e -u -o pipefail

      - name: Setup environment variables
        run: |
          echo 'PATH=$HOME/.local/bin:$PATH' >> ~/.vars
          echo 'DEBIAN_FRONTEND=noninteractive' >> ~/.vars
          source ~/.vars
          echo $PATH

      - name: Cache Docker installation
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ./docker-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Install Docker in WSL
        run: |
          source ~/.vars
          mkdir -p ./docker-cache
          
          # Install Docker if not cached
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker dependencies..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            
            echo "Adding Docker GPG key..."
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
            echo "Adding Docker repository..."
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            
            echo "Docker installed successfully"
          else
            echo "Docker already available"
          fi
          
          # Start Docker service
          sudo service docker start
          
          # Wait for Docker to be ready
          timeout 60s bash -c 'until docker info >/dev/null 2>&1; do sleep 2; done'
          
          echo "Docker is ready"
          docker --version

      - name: Start Mimir and Loki containers
        run: |
          source ~/.vars
          
          echo "Starting Mimir container..."
          docker run -d --name mimir -p 9009:9009 \
            grafana/mimir:2.13.0 \
            /bin/mimir -target=all -log.level=info -server.http-listen-port=9009
          
          echo "Starting Loki container..."
          docker run -d --name loki -p 3100:3100 \
            grafana/loki:3.0.0 \
            -config.file=/etc/loki/local-config.yaml
          
          # Wait for containers to be ready
          echo "Waiting for services to start..."
          timeout 60s bash -c 'until curl -s http://localhost:9009/ready >/dev/null; do sleep 3; done'
          timeout 60s bash -c 'until curl -s http://localhost:3100/ready >/dev/null; do sleep 3; done'
          
          echo "Services are ready"

      - name: Run Windows sample app
        shell: powershell
        run: |
          Write-Host "Running Windows sample app..."
          cd sample-apps/windows-node
          
          # Install Alloy
          Write-Host "Installing Alloy..."
          .\scripts\install_alloy.ps1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Alloy"
            exit 1
          }
          
          # Create and configure Alloy
          Write-Host "Creating Alloy configuration..."
          .\scripts\create_default_config.ps1
          .\scripts\configure_alloy.ps1
          
          # Start Alloy service
          Write-Host "Starting Alloy service..."
          .\scripts\start_alloy.ps1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to start Alloy service"
            exit 1
          }
          
          # Generate load for testing
          Write-Host "Generating test load..."
          .\scripts\generate_load.ps1

      - name: Validate metrics and logs
        run: |
          source ~/.vars
          
          echo "Validating metrics collection..."
          
          # Test Mimir metrics endpoint
          mimir_response=$(curl -s "http://localhost:9009/api/v1/query?query=up" || echo "failed")
          if [[ "$mimir_response" == "failed" ]]; then
            echo "❌ Failed to query Mimir metrics"
            exit 1
          fi
          echo "✅ Mimir metrics endpoint responding"
          
          # Test Loki logs endpoint  
          loki_response=$(curl -s "http://localhost:3100/loki/api/v1/query?query={job=\"alloy\"}" || echo "failed")
          if [[ "$loki_response" == "failed" ]]; then
            echo "❌ Failed to query Loki logs"
            exit 1
          fi
          echo "✅ Loki logs endpoint responding"
          
          echo "✅ All validation checks passed"

      - name: Cleanup
        if: always()
        run: |
          source ~/.vars
          
          echo "Stopping containers..."
          docker stop mimir loki 2>/dev/null || true
          docker rm mimir loki 2>/dev/null || true
          
          echo "Cleanup completed"

      - name: Stop Alloy service
        if: always()
        shell: powershell
        run: |
          Write-Host "Stopping Alloy service..."
          cd sample-apps/windows-node
          .\scripts\stop_alloy.ps1 