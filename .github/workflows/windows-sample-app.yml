name: "Windows Sample App"

permissions:
  contents: read

on:
  # To conserve resources we only run tests against main in PRs
  pull_request:
    branches:
      - main
    paths:
      - 'sample-apps/windows-node/**'
  
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  test-windows-sample-app:
    name: Test Windows sample app
    runs-on: windows-latest
    timeout-minutes: 45
    
    defaults:
      run:
        shell: wsl-bash {0}
        
    steps:
      - name: Set git to use LF
        shell: cmd
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup WSL
        uses: Vampire/setup-wsl@3b46b44374d5d0ae94654c45d114a3ed7a0e07a8 # v5.0.1
        with:
          distribution: Ubuntu-20.04
          wsl-shell-command: bash -e -u -o pipefail

      - name: Setup environment variables
        run: |
          echo 'PATH=$HOME/.local/bin:$PATH' >> ~/.vars
          echo 'DEBIAN_FRONTEND=noninteractive' >> ~/.vars
          source ~/.vars
          echo $PATH

      - name: Install Multipass on Windows
        shell: powershell
        run: |
          Write-Host "Installing Multipass using Chocolatey..."
          choco install multipass --yes
          
          # Wait for Multipass to be available in PATH
          Write-Host "Waiting for Multipass to be available..."
          $timeout = 300 # 5 minutes
          $elapsed = 0
          while (-not (Get-Command multipass -ErrorAction SilentlyContinue) -and $elapsed -lt $timeout) {
            # Refresh environment variables
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
            Start-Sleep -Seconds 10
            $elapsed += 10
            Write-Host "Waiting for Multipass to be available... ($elapsed/$timeout seconds)"
          }
          
          if (-not (Get-Command multipass -ErrorAction SilentlyContinue)) {
            Write-Error "Multipass installation failed or timed out"
            exit 1
          }
          
          Write-Host "Multipass installed successfully"
          multipass version

      - name: Install jq in WSL
        run: |
          source ~/.vars
          
          echo "Installing jq for JSON parsing..."
          sudo apt-get update
          sudo apt-get install -y jq
          
          echo "jq installed successfully"
          jq --version

      - name: Setup Multipass VM with databases
        run: |
          source ~/.vars
          
          echo "Setting up Multipass VM with databases..."
          
          # Launch multipass VM with docker
          echo "Launching Multipass VM..."
          multipass launch docker --name dbs
          
          # Transfer config files to VM
          echo "Transferring database config files..."
          multipass transfer ./ops/qa/dbs/* dbs:/home/ubuntu -r
          
          # Start docker containers in the VM
          echo "Starting Mimir and Loki containers in VM..."
          multipass exec dbs -- bash -c "docker-compose -f docker-compose.yaml up -d"
          
          # Get VM IP and set environment variables
          echo "Getting VM IP address..."
          DB_IP=$(multipass info dbs --format json | jq -r .info.dbs.ipv4[0])
          echo "Database VM IP: $DB_IP"
          
          # Export environment variables for later steps
          echo "LOKI_ENDPOINT=$DB_IP:3100" >> $GITHUB_ENV
          echo "MIMIR_ENDPOINT=$DB_IP:9009" >> $GITHUB_ENV
          
          # Set default config
          source ./ops/.defaultconfig
          echo "SAMPLE_APP_SETUP_TIME=$SAMPLE_APP_SETUP_TIME" >> $GITHUB_ENV
          
          echo "Database setup complete - Loki: $DB_IP:3100, Mimir: $DB_IP:9009"
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Check Mimir health endpoint
          echo "Checking Mimir health..."
          for i in {1..20}; do
            if curl -s -f http://$DB_IP:9009/ready >/dev/null; then
              echo "✅ Mimir is ready"
              break
            fi
            echo "Attempt $i/20: Mimir not ready yet..."
            sleep 5
            if [ $i -eq 20 ]; then
              echo "❌ Mimir failed to become ready"
              multipass exec dbs -- docker logs mimir --tail 20
              exit 1
            fi
          done
          
          # Check Loki health endpoint  
          echo "Checking Loki health..."
          for i in {1..20}; do
            if curl -s -f http://$DB_IP:3100/ready >/dev/null; then
              echo "✅ Loki is ready"
              break
            fi
            echo "Attempt $i/20: Loki not ready yet..."
            sleep 5
            if [ $i -eq 20 ]; then
              echo "❌ Loki failed to become ready"
              multipass exec dbs -- docker logs loki --tail 20
              exit 1
            fi
          done
          
          echo "✅ All services are ready"

      - name: Run Windows sample app
        shell: powershell
        run: |
          Write-Host "Running Windows sample app..."
          cd sample-apps/windows-node
          
          # Install Alloy
          Write-Host "Installing Alloy..."
          .\scripts\install_alloy.ps1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Alloy"
            exit 1
          }
          
          # Create and configure Alloy with remote endpoints
          Write-Host "Creating Alloy configuration..."
          Write-Host "Loki endpoint: http://${{ env.LOKI_ENDPOINT }}/loki/api/v1/push"
          Write-Host "Mimir endpoint: http://${{ env.MIMIR_ENDPOINT }}/api/v1/push"
          .\scripts\create_default_config.ps1 -LokiUrl "http://${{ env.LOKI_ENDPOINT }}/loki/api/v1/push" -PrometheusUrl "http://${{ env.MIMIR_ENDPOINT }}/api/v1/push"
          .\scripts\configure_alloy.ps1
          
          # Start Alloy service
          Write-Host "Starting Alloy service..."
          .\scripts\start_alloy.ps1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to start Alloy service"
            exit 1
          }
          
          # Generate load for testing
          Write-Host "Generating test load..."
          .\scripts\generate_load.ps1
          
          Write-Host "Windows sample app setup complete"

      - name: Wait for sample app to generate metrics
        run: |
          source ~/.vars
          echo "Waiting for sample app to generate metrics..."
          sleep ${{ env.SAMPLE_APP_SETUP_TIME }}

      - name: Validate metrics and logs
        run: |
          source ~/.vars
          
          echo "Validating metrics collection..."
          echo "Checking endpoints: Mimir=${{ env.MIMIR_ENDPOINT }}, Loki=${{ env.LOKI_ENDPOINT }}"
          
          # Test Mimir metrics endpoint for Windows exporter metrics
          echo "Checking for Windows exporter metrics..."
          mimir_response=$(curl -s "http://${{ env.MIMIR_ENDPOINT }}/api/v1/query?query=up{job=\"integrations/windows_exporter\"}" || echo "failed")
          if [[ "$mimir_response" == "failed" ]]; then
            echo "❌ Failed to query Mimir metrics"
            exit 1
          fi
          
          # Check if we got actual metrics
          metrics_count=$(echo "$mimir_response" | jq -r '.data.result | length' 2>/dev/null || echo "0")
          if [[ "$metrics_count" == "0" ]]; then
            echo "⚠️ No Windows exporter metrics found yet, checking general connectivity..."
            general_response=$(curl -s "http://${{ env.MIMIR_ENDPOINT }}/api/v1/query?query=up" || echo "failed")
            if [[ "$general_response" == "failed" ]]; then
              echo "❌ Mimir endpoint not responding"
              exit 1
            fi
            echo "✅ Mimir endpoint responding but no Windows metrics yet"
          else
            echo "✅ Found $metrics_count Windows exporter metric series"
          fi
          
          # Test Loki logs endpoint  
          echo "Checking for Windows logs..."
          loki_response=$(curl -s "http://${{ env.LOKI_ENDPOINT }}/loki/api/v1/query?query={job=\"integrations/windows_exporter\"}" || echo "failed")
          if [[ "$loki_response" == "failed" ]]; then
            echo "❌ Failed to query Loki logs"
            exit 1
          fi
          echo "✅ Loki logs endpoint responding"
          
          echo "✅ All validation checks passed"

      - name: Cleanup Multipass VM
        if: always()
        run: |
          source ~/.vars
          
          echo "Cleaning up Multipass VM..."
          
          # Stop and delete the VM
          if multipass list | grep -q "dbs"; then
            echo "Stopping Multipass VM..."
            multipass stop dbs || true
            
            echo "Deleting Multipass VM..."
            multipass delete dbs || true
            
            echo "Purging deleted VMs..."
            multipass purge || true
          else
            echo "No Multipass VM found to clean up"
          fi
          
          echo "Cleanup completed"

      - name: Stop Alloy service
        if: always()
        shell: powershell
        run: |
          Write-Host "Stopping Alloy service..."
          cd sample-apps/windows-node
          .\scripts\stop_alloy.ps1
